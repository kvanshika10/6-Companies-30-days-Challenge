
class Solution
{
      
    public:
      
     bool isValid(int i,int j,int n,int m,vector<vector<int>>&grid)
     {
         if(i<n&&i>=0&&j<m&&j>=0&&grid[i][j]==1)
           return 1;
           else return 0;
     }
     
     
 int bfs(vector<vector<int>>&grid,int i,int j){
       vector<int>dir1={-1,-1,+1,0,0,-1,+1,+1};
        vector<int>dir2={-1,0,0,-1,+1,+1,-1,+1};
        queue<pair<int,int>> q;
        int n=grid.size();
        int m=grid[0].size();
           q.push({i,j});
           grid[i][j]=0;
           int count=0;
        
        
        while(!q.empty()){
         i=q.front().first;
         j=q.front().second;
          //cout << i << j << ""<< count << endl;
        count++;
        q.pop();
       
       for(int k=0;k<8;k++){
           int x=i+dir1[k],y=j+dir2[k];
           if(isValid(x,y,n,m,grid)){
                grid[x][y]=0;
                     q.push({x,y});
                     

                    }
        
              }
              
        }
        return count;
        
        // Code here
    }
    
    //Function to find unit area of the largest region of 1s.
    int findMaxArea(vector<vector<int>>& grid) {
      
        int maxi=1;
         int n=grid.size();
        int m=grid[0].size();
         
      for(int i=0;i<n;i++){
          for(int j=0;j<m;j++){
              if(grid[i][j]==1){
                   maxi=max(maxi,bfs(grid,i,j));
                  
                   
              }
          }
      }
      
      return maxi;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.findMaxArea(grid);
		cout << ans << "\n";
	}
	return 0;
}  // } Driver Code Ends