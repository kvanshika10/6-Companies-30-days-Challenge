class Solution{
    public:
    // arr[] : int input array of integers
    // k : the quadruple sum required
    // o(n3)soln -// sort then run a loop from i=0to ito n-4
    // ii- run a loop from j-i+1 to n-3
    //iii -take l=j+1 to n-1 sum=a[l]+a[r]+a[i]+a[j]
    /// iv while(l<r) if sum==k ans else if sum<k l++; else r--;
    vector<vector<int> > fourSum(vector<int> &arr, int k) {
        int n=arr.size();
        
        
        map<int,pair<int,int>>mp;
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++)
              mp[arr[i]+arr[j]]={i,j};
        }
         set<vector<int>>ans;
         vector<vector<int> >v2;
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                    int sum=arr[i]+arr[j];
                    if(mp.find(k-sum)!=mp.end()){
                        pair<int,int>p=mp[k-sum];
                    if(p.first!=i&&p.first!=j&&p.second!=i&&p.second!=j){
                        vector<int>v1;
                       v1.push_back(arr[i]);
                       v1.push_back(arr[j]);
                       v1.push_back(arr[p.first]);
                       v1.push_back(arr[p.second]);
                       sort(v1.begin(),v1.end());
                       ans.insert(v1);
                       }
                   }
               }
        }
        for(auto k:ans)
            v2.push_back(k);
            
        return v2;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k, i;
        cin >> n >> k;
        vector<int> a(n);
        for (i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        vector<vector<int> > ans = ob.fourSum(a, k);
        for (auto &v : ans) {
            for (int &u : v) {
                cout << u << " ";
            }
            cout << "$";
        }
        if (ans.empty()) {
            cout << -1;
        }
        cout << "\n";
    }
    return 0;
}  // } Driver Code Ends