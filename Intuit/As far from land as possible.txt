class Solution {
    vector<vector<int> > gr;
    int n;
    int x[4]={-1,0,1,0};
    int y[4]={0,1,0,-1};
    queue<pair<int,int> > que;
    vector<vector<int> > vis;
public:
    int bfs(){
        int ans=-1;
        while(!que.empty()){
            ans++;
            int len=que.size();
            while(len--){
                auto t=que.front();
                que.pop();
                int x1=t.first;
                int y1=t.second;
                for(int dir=0;dir<4;dir++){
                    int x2=x1+x[dir];
                    int y2=y1+y[dir];
                    if(x2<0 || y2<0 || x2>=n || y2>=n || vis[x2][y2]) continue;
                    vis[x2][y2]=1;
                    que.push({x2,y2});
                }
            }
        }
        return ans;
    }
    int maxDistance(vector<vector<int>>& grid) {
        gr=grid;
        n=grid.size();
        vis.resize(n,vector<int>(n,0));
        int ans=-1;
        int c=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    c++;
                    que.push({i,j});
                    vis[i][j]=1;
                }
            }
        }
        if(c==0 || c==(n*n)) return -1;
        return bfs();
    }
};
