class Solution
{
    public:
    //Function to find the largest number after k swaps.
    // initial approach 
    // finding the max among the i+1 to n and swap it with s[i];
     // what was the problem ? and why i have to use backtracking 
     // example take example 612399 k=2; 993216 or 993261? which 9 to swap with i 
     // thats why we have to swap every greater number
     
       void solve(string str,int k,string& max,int curr){
           
           if(k==0||curr==str.size())
           return;
           
        int n=str.size();
        char maxim=str[curr];
       for(int i=curr+1;i<n;i++){
           if(str[i]>maxim)
                maxim=str[i];
                
       }
       if(maxim!=str[curr])
          k--; //44213 k=1;
      
       for(int j=n-1;j>=curr;j--){
          if(str[j]==maxim){
           swap(str[j],str[curr]);
               if (str.compare(max) > 0)
                    max = str;
 
                // recurse of the other k - 1 swaps
                solve(str, k,max,curr+1);
 
                // Backtrack
                swap(str[j], str[curr]);
               }
       
        }
           
          
           
           
       }
     
      
    string findMaximumNum(string str, int k)
    {
        
       string max=str;
       solve(str,k,max,0);
      
       return max;
       
    }
};

// { Driver Code Starts.

int main()
{
    int t, k;
    string str;

    cin >> t;
    while (t--)
    {
        cin >> k >> str;
        Solution ob;
        cout<< ob.findMaximumNum(str, k) << endl;
    }
    return 0;
}
  // } Driver Code Ends