#include <bits/stdc++.h>

using namespace std;

// Tree Node
// see soln of leetcode (better)
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

// Function to Build Tree
Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends
/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */


class Solution
{
    public:
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
                if(root==0)return {};
        queue<Node*>q;
        
        q.push(root);
        
        vector<int>v1;
        while(!q.empty()){
            Node*curr=q.front();
            q.pop();
            if(curr!=NULL)
            v1.push_back(curr->data);
            else v1.push_back(-1);
            if(curr!=NULL){
                q.push(curr->left);
                q.push(curr->right);
            }
        }
            
        return v1;
    }

    
        
    
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
       if(A.size()==0)return NULL;
       
       
        queue<Node*>q;
         int i=0;
        Node*root= new Node(A[i]);
         q.push(root);
         i++;
        while(!q.empty()){
            Node*curr=q.front();
            q.pop();
            if(A[i]==-1){
                curr->left=NULL;
            }else {
               Node*leftNode=new Node(A[i]);
                curr->left=leftNode;
                q.push(curr->left);
                
            }
                 i++;
           
            if(A[i]==-1){
                curr->right=NULL;
            }else {
                
                Node*rightNode=new Node(A[i]);
                curr->right=rightNode;
                q.push(curr->right);
                
            } 
            i++;
        }
        
        return root;
        
    }
    
    

};
