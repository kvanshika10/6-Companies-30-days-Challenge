#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends
//User function Template for C++

class Solution {
  public:
    int minTime(Node* root, int target) 
    {
            queue<Node*> q;
            q.push(root);
            map<Node*,Node*>mp;
            mp.insert({root,NULL});
            Node*target_address;
            while(!q.empty()){
                Node*curr=q.front();
                if(curr->data==target){
                    target_address=curr;
                }
                q.pop();
                if(curr->left){
                    q.push(curr->left);
                    mp.insert({curr->left,curr});
                }
                if(curr->right){
                    q.push(curr->right);
                    mp.insert({curr->right,curr});
                }
            }
           int ans=0;
           queue<pair<Node*,int>>q2;
            q2.push({target_address,ans});
            map<Node*,int>visited;
            visited[target_address]=1;
            while(!q2.empty()){
                Node*curr=q2.front().first;
                ans=q2.front().second;
                q2.pop();
                
                
                
               // cout << curr->data <<ans << endl;
                 
                 
                if(mp[curr]!=NULL){
                
                    if(!visited[mp[curr]]){
                    q2.push({mp[curr],ans+1});
                     visited[mp[curr]]=1;
                    }
                    
                    
                }
                
                if(curr->left!=NULL&&!visited[curr->left]){
                // cout << curr->left->data << endl; 
                    q2.push({curr->left,ans+1});
                    visited[curr->left]=1;
                }
                if(curr->right&&!visited[curr->right]){
                    q2.push({curr->right,ans+1});
                     visited[curr->right]=1;
                }
            }
            return ans;
            
            
            
    }
};
