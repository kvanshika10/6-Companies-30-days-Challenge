class Solution {
	public:
	int solve(string str,int n){
	    // explanation in notes(voice)
	    int m=1000000007;
	   long long int dp[n+1];
	    dp[0]=1;
	    dp[1]=1;
	    if(str[0]=='0')
	      return 0;
	    for(int i=2;i<=n;i++){
	       dp[i]=0;
	       
	       if(str[i-1]>'0')
	         dp[i]= dp[i-1]; // if last dig>0 recur for n-1 digits 
	          if(str[i-2]=='1'||(str[i-2]=='2'&&str[i-1]<='6'))
	               dp[i]+=dp[i-2];
	       dp[i]=dp[i]%m;        
	               
	    }
	         return dp[n];
	}
		int CountWays(string str){
		    int n=str.size();
		    if(n==0||(n==1&&str[0]=='0'))// not possible
		          return 0;
		       return solve(str,n);
		}

};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		string str;
		cin >> str;
		Solution obj;
		int ans = obj.CountWays(str);
		cout << ans << "\n";
	}
	return 0;
}  // } Driver Code Ends