class Solution{
public:
  bool solve(int x,int set_bit){
      int count=0;
      while(x>0){
          if(count==set_bit){
              if(x&1)
              return 1;
              else return 0;
          }
          count++;
          x=x>>1;
      }
      return 0;
  }
    int *findTwoElement(int *arr, int n) {
        // first take xor of all elements;
      int x=0,i;
        for(i=1;i<=n;i++){
          x=x^i;
        }
        for(i=0;i<n;i++){
            x=x^arr[i];
        }
        // now you have a^b  =x where a is the repeating no and b is the missing number
        int count=0,set_bit=0;
        while(x>0){
            if(x&1){
                set_bit=count;
            }
            x=x>>1;
            count++;
        }
        vector<int>v1,v2;
        for(i=0;i<n;i++){
            if(solve(arr[i],set_bit))
              v1.push_back(arr[i]);
              else v2.push_back(arr[i]);
        }
        for(i=1;i<=n;i++){
             if(solve(i,set_bit))
              v1.push_back(i);
              else v2.push_back(i);
            
        }
        int p=0,q=0;
        for(auto k:v1){
            p=p^k;
        }
        for(auto k:v2){
            q=q^k;
        }
        int *a =new int[2];
          a[0]=p;
        a[1]=q;
        for(i=0;i<n;i++){
            if(arr[i]==a[1]){
            swap(a[0],a[1]);
            break;
            }
        }
      
        return a;
        
    }
};

/